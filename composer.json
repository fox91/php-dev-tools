{
    "name": "fox91/dev-tools",
    "description": "fox91 Dev Tools",
    "type": "library",
    "license": "MIT",
    "authors": [
        {
            "name": "Andrea Falco",
            "email": "andrea@falco.sh"
        }
    ],
    "minimum-stability": "dev",
    "prefer-stable": true,
    "require": {
        "php": "^7.3 || ^8.0",
        "dealerdirect/phpcodesniffer-composer-installer": "^0.7.1",
        "fox91/coding-standard": "^0.2.0",
        "php-parallel-lint/php-console-highlighter": "^0.5.0",
        "php-parallel-lint/php-parallel-lint": "^1.2",
        "phpunit/phpunit": "^9.5",
        "psalm/plugin-phpunit": "^0.15.1 || ^0.16.0",
        "rector/rector": "^0.12.0",
        "roave/security-advisories": "dev-latest",
        "squizlabs/php_codesniffer": "^3.6",
        "vimeo/psalm": "^4.6"
    },
    "conflict": {
        "rector/rector": "0.11.33, 0.11.34"
    },
    "suggest": {
        "brainbits/phpstan-rules": "[--dev] PHPStan extension with opinionated strict rules for better code in tests",
        "ergebnis/phpstan-rules": "[--dev] Provides additional rules for phpstan/phpstan",
        "korbeil/phpstan-generic-rules": "[--dev] Generic rules extensions for PHPStan",
        "phpstan/extension-installer": "[--dev] Composer plugin for automatic installation of PHPStan extensions",
        "phpstan/phpstan": "[--dev] PHPStan - PHP Static Analysis Tool",
        "phpstan/phpstan-beberlei-assert": "[--dev] PHPStan beberlei/assert extension",
        "phpstan/phpstan-deprecation-rules": "[--dev] PHPStan rules for detecting usage of deprecated classes, methods, properties, constants and traits",
        "phpstan/phpstan-phpunit": "[--dev] PHPUnit extensions and rules for PHPStan",
        "phpstan/phpstan-strict-rules": "[--dev] Extra strict and opinionated rules for PHPStan",
        "thecodingmachine/phpstan-safe-rule": "[--dev] A PHPStan rule to be used with the thecodingmachine/safe package",
        "thecodingmachine/phpstan-strict-rules": "[--dev] A set of additional rules for PHPStan based on best practices followed at TheCodingMachine",
        "thecodingmachine/safe": "All PHP functions, rewritten to throw exceptions instead of returning false"
    }
}
